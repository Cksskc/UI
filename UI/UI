import tkinter as tk # imports the tkinter module, which is a standard Python interface to the Tk GUI toolkit
from tkinter import ttk # provides access to the Tk themed widget set
from tkinter import scrolledtext # imports the scrolledtext module from tkinter, which allows us to add text widgets with a vertical scroll bar.
from threading import Thread #
import time # imports the time module and provides various time-related functions.


# Trading loop status
is_running = False # global boolean variable, initialize it to "False"

# Start the trading loop
def start_loop(): #
    global is_running #
    if not is_running: #
        is_running = True # sets the global variable is_running to True, indicating the trading loop should be running.
        log_message("Starting the trading loop...") # logs a message to the text widget indicating that the trading loop is starting.
        t = Thread(target=trading_loop) # creates a new Thread object, with trading_loop as the target function to be executed (A Thread is a separate flow of execution)
        t.start() # starts the new thread.

# Stop the trading loop
def stop_loop(): # This function stops the trading loop if is_running is "True"
    global is_running
    if is_running:
        is_running = False # sets is_running to False, indicating the trading loop should be stopped.
        log_message("Stopping the trading loop...")  # logs a message to the text widget indicating that the trading loop is stopping.

# Trading loop
def trading_loop():   # This function runs the main trading program every 60 minutes as long as is_running is True
    while is_running: # creates a loop that will continue as long as is_running is True.
        trading_program.main()  # executes the main function of your trading program, I am assuming here  thats what we will use in the program.
        time.sleep(60 * 60) # This line causes the program to pause for 60*60 seconds (1 hour) between each iteration of the trading loop. It is all still to be determined how long it should be.

# Log messages to the text widget
def log_message(message):
    log_text.insert(tk.END, f"{message}\n")
    log_text.see(tk.END)

# Create the main window
app = tk.Tk()
app.title("Trading Program") # sets the title of the root widget window to "Trading Program".

# Create and configure the main frame
main_frame = ttk.Frame(app, padding="10")
main_frame.grid(column=0, row=0, sticky=(tk.W, tk.E, tk.N, tk.S)) # makes the widget stretch in all directions
app.columnconfigure(0, weight=1)
app.rowconfigure(0, weight=1)

# Create the Start and Stop buttons
start_button = ttk.Button(main_frame, text="Start", command=start_loop)
start_button.grid(column=0, row=0, sticky=(tk.W, tk.E))

stop_button = ttk.Button(main_frame, text="Stop", command=stop_loop)
stop_button.grid(column=1, row=0, sticky=(tk.W, tk.E))

# Create the Log text widget
log_label = ttk.Label(main_frame, text="Log:")
log_label.grid(column=0, row=1, sticky=(tk.W), pady=5)

log_text = scrolledtext.ScrolledText(main_frame, width=50, height=10, wrap=tk.WORD)
log_text.grid(column=0, row=2, columnspan=2, sticky=(tk.W, tk.E))

# Create the Stocks list
stocks_label = ttk.Label(main_frame, text="Stocks:")
stocks_label.grid(column=0, row=3, sticky=(tk.W), pady=5)

stocks_list = "BTC" # Assuming your trading program has a list named 'stocks'
stocks_var = tk.StringVar(value=stocks_list)

stocks_listbox = tk.Listbox(main_frame, listvariable=stocks_var, height=5)
stocks_listbox.grid(column=0, row=4, sticky=(tk.W, tk.E), padx=5)


stocks_listbox.grid(column=0, row=4, sticky=(tk.W, tk.E), padx=5)

# Create the Cryptocurrencies list
crypto_label = ttk.Label(main_frame, text="Cryptocurrencies:")
crypto_label.grid(column=1, row=3, sticky=(tk.W), pady=5)

crypto_list = "ETH"  # Assuming your trading program has a list named 'crypto'
crypto_var = tk.StringVar(value=crypto_list)

crypto_listbox = tk.Listbox(main_frame, listvariable=crypto_var, height=5)
crypto_listbox.grid(column=1, row=4, sticky=(tk.W, tk.E), padx=5)

# Set the column and row weights, configures the main frame to expand the 1st,2nd,3rd,4th row when the window is resized.
main_frame.columnconfigure(0, weight=1)
main_frame.columnconfigure(1, weight=1)
main_frame.rowconfigure(2, weight=1)
main_frame.rowconfigure(4, weight=1)

# Run the main event loop
app.mainloop()